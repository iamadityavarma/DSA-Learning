Recursion is a process in which a function calls itself directly or indirectly until a certain condition is met. This concept is based on the idea of breaking down a complex problem into smaller instances of the same problem. 
It is often used in scenarios where the problem can be divided into smaller sub-problems of the same nature, such as traversing trees, calculating factorials, or generating permutations.  
It is important to notice that recursion is suseptible to Infinite looping if not handeled properly. Below given is a example of recursion.

Fibonacci Series:
The Fibonacci series is a sequence of numbers in which each number is the sum of the two preceding ones, Below given is a part of Fibonacci Sequence:
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...

We can define it mathematically as:
F(n) = F(n-1) + F(n-2), for n >= 2
F(0) = 0
F(1) = 1

Where:
F(n) represents the nth number in the Fibonacci sequence.
F(n-1) and F(n-2) are the two preceding numbers in the sequence.

Simplest Way to write a function for Fibonacci Series is:
  
def fibonacci(sequence_len):
    if sequence_len <= 1:
        return 0
    elif sequence_len <= 2:
        return 1
    else:
        return fibonacci(sequence_len - 1) + fibonacci(sequence_len - 2)
# Printind the series
sequence_len = 10 # We can change the sequence Length
def print_series(sequence_len):
  for i in range(1,sequence_len+1):
    print(fibonacci(i),end=" ")

The problem with this code is that the Time Complexity of this Code is O(2^n). 
 to compute fibonacci(5), the function will recursively call:

fibonacci(4) and fibonacci(3)
fibonacci(4) will call fibonacci(3) and fibonacci(2)
fibonacci(3) will call fibonacci(2) and fibonacci(1)

Notice how the function is call is repeated. Fibonacci(3) is getting called in both fibonacci(5) and fibonacci(4).

we can write this code in a better way to reduce the compute time. This is where Memorisation part comes into play.

To reduce the time complexity, we can use memoization or dynamic programming to store and reuse the results of previous calculations.

Below is an Example:

def fibonacci(sequence_len, memory={}):
  if sequence_len <= 1:
    return 0
  elif sequence_len <= 2:
    return 1
  else:
    memory[sequence_len] = fibonacci(sequence_len-1, memory) + fibonacci(sequence_len-2, memory)
  return  memory[sequence_len]

def print_series(sequence_len):
  for i in range(1,sequence_len+1):
    print(fibonacci(i),end=" ")

Here we are creating a Dictionary and storing the values in a key-value combination. This will eliminate the need to Repeat the call of Function with Same value.Time Compelxity is thereby reduced to O(n) since function is called only once with each Value.
